from tabulate import tabulate
import json
import os
import math
import sys

xontrib load vox
#xontrib load vox_tabcomplete
#xontrib load apt_tabcomplete

# Shell Settings
$SHELL_TYPE   = "prompt_toolkit"
$CASE_SENSITIVE_COMPLETIONS = False
$MULTILINE_PROMPT = ''
$XONSH_COLOR_STYLE = 'monokai'
$UPDATE_OS_ENVIRON = True
$VC_BRANCH_TIMEOUT = 1
$COMPLETIONS_CONFIRM = True
$COMPLETIONS_DISPLAY = 'single'
$XONSH_AUTOPAIR = True
$XONSH_SHOW_TRACEBACK = True
$TERM='xterm-color'
$GPG_TTY=$(tty)

def _virtualenv():
    env = __xonsh_env__.get('VIRTUAL_ENV', '')
    if env:
        env = os.path.basename(env)

        return '{BOLD_WHITE}({INTENSE_BLACK}' + env + '{BOLD_WHITE})'
    else:
        return ''

def _gitbranch():
    # If we're in a git repo
    if !(git rev-parse --git-dir 2>&1 >> /dev/null):
        output = ""

        branch = $(git symbolic-ref HEAD -q | sed -r 's%refs/heads/%%').strip('\n') or 'DETACHED'
        commit_hash = $(git rev-parse HEAD).strip('\n')[:7]
        #tags = [tag.rstrip() for tag in !(git tag -l --points-at HEAD)]
        tags = None

        tag_output = ""

        if tags:
            for tag in tags:
                tag_output += '{INTENSE_YELLOW}' + tag + ', '
            else:
                tag_output = ' Tags: {BOLD_WHITE}[' + tag_output.rstrip(', ') + '{BOLD_WHITE}]'

        change_char = ''
        if len($(git status -s)) > 0:
            change_char = '*'

        output += change_char
        output += '{BOLD_YELLOW}' + branch
        output += '{BOLD_WHITE}({INTENSE_BLACK}' + commit_hash + '{BOLD_WHITE})'
        output += tag_output

        return output

    else:
        return ''

def _returncode():
    try:
        if __xonsh_history__.rtns[-1] != 0:
            return '{BOLD_INTENSE_RED}' + str(__xonsh_history__.rtns[-1]) + ' '
        else:
            return ''
    except Exception as e:
        return ''

@events.on_postcommand
def _print_elapsed_time(ts, **kwargs):

    elapsed = ts[1] - ts[0]
    elapsed = math.ceil(elapsed)

    if elapsed > 10:
        readable = ""
        days = int(elapsed / (60 * 60 * 24))
        hours = int((elapsed / (60 * 60)) % 24)
        minutes = int((elapsed % (60 * 60)) / 60)
        seconds = int(elapsed % 60)

        if(days > 0):       readable += str(days) + "d "
        if(hours > 0):      readable += str(hours) + "h "
        if(minutes > 0):    readable += str(minutes) + "m "
        if(seconds > 0):    readable += str(seconds) + "s "

        print("\033[2mCommand took {}\033[0m".format(readable))

def json_to_yaml(*args, **kwargs):
    import json
    import yaml

    input_file = args[0][0]
    output_file = input_file.split('.')[0] + '.yaml'

    with open(input_file, 'r') as file:
        json_input = json.load(file)

    with open(output_file, 'w') as file:
        file.write(yaml.safe_dump(json_input))

def _secure_password(length=16):
    import random

    chars = \
        'abcdefghijklmnopqrstuvwxyz' + \
        '0123456789' + \
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + \
        '^!$()=?~|'

    if length < 8:
        raise ValueError('Length must be >= 8 chars')

    while True:
        password = ""
        while len(password) < length:
            char = random.choice(chars)

            if password and password[-1] == char:
                continue
            password += char

        if (any(c.islower() for c in password)
            and any(c.isupper() for c in password)
            and sum(c.isdigit() for c in password) >= (length / 4)):
                return password

$PROMPT_FIELDS['return_code'] = _returncode
$PROMPT_FIELDS['virtualenv'] = _virtualenv
$PROMPT_FIELDS['gitbranch'] = _gitbranch

$PROMPT = "{return_code}{virtualenv}{BOLD_WHITE}[{BOLD_YELLOW}{cwd_base}{BOLD_WHITE}]$ {NO_COLOR}"
$RIGHT_PROMPT = "{gitbranch}{NO_COLOR}"

try:
    del $SHELL # Needed because it cannot find the `exec` sys call from the shell?
except:
    pass

# Aliases
aliases['j2y'] = json_to_yaml
aliases['hash'] = 'md5sum'
aliases['matrix'] = 'cmatrix -a -b -u6'
aliases['fucking'] = 'sudo'
aliases['ll'] = "ls -alF"
aliases['la'] = "ls -A"
aliases['l'] = "ls -CF"
aliases['..'] = "cd .."
aliases['-'] = "cd -"
aliases['pip3'] = 'python3 -m pip'
aliases['atom'] = '/usr/bin/atom -a'
aliases['password'] = lambda: print(_secure_password())
aliases['py3'] = 'python3 -m ptpython'


source ~/.xonshrc-secrets
